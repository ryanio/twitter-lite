{"version":3,"file":"twitter.modern.js","sources":["../twitter.js"],"sourcesContent":["const crypto = require('crypto');\nconst OAuth = require('oauth-1.0a');\nconst Fetch = require('cross-fetch');\nconst querystring = require('querystring');\nconst Stream = require('./stream');\nconst oauthSignature = require('oauth-signature');\nconst getRandomValues = require('get-random-values');\n\n\nconst getUrl = (subdomain, endpoint = '1.1') =>\n  `https://${subdomain}.twitter.com/${endpoint}`;\n\nconst createOauthClient = ({ key, secret }) => {\n  const client = OAuth({\n    consumer: { key, secret },\n    signature_method: 'HMAC-SHA1',\n    hash_function(baseString, key) {\n      return crypto\n        .createHmac('sha1', key)\n        .update(baseString)\n        .digest('base64');\n    },\n  });\n  return client;\n};\n\nconst defaults = {\n  subdomain: 'api',\n  consumer_key: null,\n  consumer_secret: null,\n  access_token_key: null,\n  access_token_secret: null,\n  bearer_token: null,\n  version: '1.1',\n  extension: true,\n};\n\n// Twitter expects POST body parameters to be URL-encoded: https://developer.twitter.com/en/docs/basics/authentication/guides/creating-a-signature\n// However, some endpoints expect a JSON payload - https://developer.twitter.com/en/docs/direct-messages/sending-and-receiving/api-reference/new-event\n// It appears that JSON payloads don't need to be included in the signature,\n// because sending DMs works without signing the POST body\nconst JSON_ENDPOINTS1 = [\n  'direct_messages/events/new',\n  'direct_messages/welcome_messages/new',\n  'direct_messages/welcome_messages/rules/new',\n  'media/metadata/create',\n  'collections/entries/curate',\n  'tweets',\n];\n\nconst JSON_ENDPOINTS2 = [\n  'media/upload',\n];\n\nconst baseHeaders = {\n  'Content-Type': 'application/json',\n  Accept: 'application/json',\n};\n\nfunction percentEncode(string) {\n  // From OAuth.prototype.percentEncode\n  return string\n    .replace(/!/g, '%21')\n    .replace(/\\*/g, '%2A')\n    .replace(/'/g, '%27')\n    .replace(/\\(/g, '%28')\n    .replace(/\\)/g, '%29');\n}\n\nclass Twitter {\n  constructor(options) {\n    const config = Object.assign({}, defaults, options);\n    this.authType = config.bearer_token ? 'App' : 'User';\n    this.client = createOauthClient({\n      key: config.consumer_key,\n      secret: config.consumer_secret,\n    });\n\n    this.token = {\n      key: config.access_token_key,\n      secret: config.access_token_secret,\n    };\n\n    this.url = getUrl(config.subdomain, config.version);\n    this.oauth = getUrl(config.subdomain, 'oauth');\n    this.config = config;\n  }\n\n  /**\n   * Parse the JSON from a Response object and add the Headers under `_headers`\n   * @param {Response} response - the Response object returned by Fetch\n   * @return {Promise<object>}\n   * @private\n   */\n  static async _handleResponse(response) {\n    const headers = response.headers; // TODO: see #44\n    if (response.ok) {\n      // Return empty response on 204 \"No content\", or Content-Length=0\n      if (response.status === 204 || response.headers.get('content-length') === '0')\n        return {\n          _headers: headers,\n        };\n      // Otherwise, parse JSON response\n      return response.json().then(res => {\n        res._headers = headers; // TODO: this creates an array-like object when it adds _headers to an array response\n        return res;\n      });\n    } else {\n      throw {\n        _headers: headers,\n        ...await response.json(),\n      };\n    }\n  }\n\n  /**\n   * Resolve the TEXT parsed from the successful response or reject the JSON from the error\n   * @param {Response} response - the Response object returned by Fetch\n   * @return {Promise<object>}\n   * @throws {Promise<object>}\n   * @private\n   */\n  static async _handleResponseTextOrJson(response) {\n    let body = await response.text();\n    if (response.ok) {\n      return querystring.parse(body);\n    } else {\n      let error;\n      try {\n        // convert to object if it is a json\n        error = JSON.parse(body);\n      } catch (e) {\n        // it is not a json\n        error = body;\n      }\n      return Promise.reject(error);\n    }\n  }\n\n  async getBearerToken() {\n    const headers = {\n      Authorization:\n        'Basic ' +\n        Buffer.from(\n          this.config.consumer_key + ':' + this.config.consumer_secret,\n        ).toString('base64'),\n      'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8',\n    };\n\n    const results = await Fetch('https://api.twitter.com/oauth2/token', {\n      method: 'POST',\n      body: 'grant_type=client_credentials',\n      headers,\n    }).then(Twitter._handleResponse);\n\n    return results;\n  }\n\n  async getRequestToken(twitterCallbackUrl) {\n    const requestData = {\n      url: `${this.oauth}/request_token`,\n      method: 'POST',\n    };\n\n    let parameters = {};\n    if (twitterCallbackUrl) parameters = { oauth_callback: twitterCallbackUrl };\n    if (parameters) requestData.url += '?' + querystring.stringify(parameters);\n\n    const headers = this.client.toHeader(\n      this.client.authorize(requestData, {}),\n    );\n\n    const results = await Fetch(requestData.url, {\n      method: 'POST',\n      headers: Object.assign({}, baseHeaders, headers),\n    })\n      .then(Twitter._handleResponseTextOrJson);\n\n    return results;\n  }\n\n  async getAccessToken(options) {\n    const requestData = {\n      url: `${this.oauth}/access_token`,\n      method: 'POST',\n    };\n\n    let parameters = { oauth_verifier: options.oauth_verifier, oauth_token: options.oauth_token };\n    if (parameters.oauth_verifier && parameters.oauth_token) requestData.url += '?' + querystring.stringify(parameters);\n\n    const headers = this.client.toHeader( this.client.authorize(requestData) );\n\n    const results = await Fetch(requestData.url, {\n      method: 'POST',\n      headers: Object.assign({}, baseHeaders, headers),\n    })\n      .then(Twitter._handleResponseTextOrJson);\n\n    return results;\n  }\n\n  /**\n   * Construct the data and headers for an authenticated HTTP request to the Twitter API\n   * @param {string} method - 'GET' or 'POST'\n   * @param {string} resource - the API endpoint\n   * @param {object} parameters\n   * @return {{requestData: {url: string, method: string}, headers: ({Authorization: string}|OAuth.Header)}}\n   * @private\n   */\n  _makeRequest(method, resource, parameters) {\n    const requestData = {\n      url: `${this.url}/${resource}${this.config.extension ? '.json' : ''}`,\n      method,\n    };\n    if (parameters)\n      if (method === 'POST') requestData.data = parameters;\n      else requestData.url += '?' + querystring.stringify(parameters);\n\n    let headers = {};\n    if (this.authType === 'User') {\n      headers = this.client.toHeader(\n        this.client.authorize(requestData, this.token),\n      );\n    } else {\n      headers = {\n        Authorization: `Bearer ${this.config.bearer_token}`,\n      };\n    }\n    return {\n      requestData,\n      headers,\n    };\n  }\n\n  /**\n   * Send a GET request\n   * @param {string} resource - endpoint, e.g. `followers/ids`\n   * @param {object} [parameters] - optional parameters\n   * @returns {Promise<object>} Promise resolving to the response from the Twitter API.\n   *   The `_header` property will be set to the Response headers (useful for checking rate limits)\n   */\n  get(resource, parameters) {\n    const { requestData, headers } = this._makeRequest(\n      'GET',\n      resource,\n      parameters,\n    );\n\n    return Fetch(requestData.url, { headers })\n      .then(Twitter._handleResponse);\n  }\n\n  /**\n   * Create oauth signature\n   * @param {httpMethod} get || post || put || delete.\n   * @param {parameters} body - parameters object.\n   * @param {consumerSecret} consumerSecret.\n   * @param {tokenSecret} tokenSecret.\n   * @returns {<object>} Returns encodedSignature & signature\n   */\n  createOauthSignature(httpMethod, url, parameters, consumerSecret, tokenSecret) {\n    const params = {\n      httpMethod,\n      url,\n      parameters,\n      consumerSecret,\n      tokenSecret,\n    };\n    // generates a RFC 3986 encoded, BASE64 encoded HMAC-SHA1 hash\n    const encodedSignature = oauthSignature.generate(\n        params.httpMethod,\n        params.url,\n        params.parameters,\n        params.consumerSecret,\n        params.tokenSecret,\n      ),\n      // generates a BASE64 encode HMAC-SHA1 hash\n      signature = oauthSignature.generate(\n        params.httpMethod,\n        params.url,\n        params.parameters,\n        params.consumerSecret,\n        params.tokenSecret,\n        {\n          encodeSignature: false,\n        },\n      );\n    return {\n      encodedSignature,\n      signature,\n    };\n  }\n\n\n\n  /**\n   * Generates nonce\n   * @returns {<object>} Returns nonce\n   */\n  generateNonce() {\n    const charset = '0123456789ABCDEFGHIJKLMNOPQRSTUVXYZabcdefghijklmnopqrstuvwxyz-._~';\n    const result = [];\n    getRandomValues(new Uint8Array(32)).forEach(c =>\n      result.push(charset[c % charset.length]));\n    return result.join('');\n  }\n\n  /**\n   * Send a POST request\n   * @param {string} resource - endpoint, e.g. `users/lookup`\n   * @param {object} body - POST parameters object.\n   *   Will be encoded appropriately (JSON or urlencoded) based on the resource\n   * @returns {Promise<object>} Promise resolving to the response from the Twitter API.\n   *   The `_header` property will be set to the Response headers (useful for checking rate limits)\n   */\n  post(resource, body) {\n    const { requestData, headers } = this._makeRequest(\n      'POST',\n      resource,\n      JSON_ENDPOINTS1.includes(resource) ? null : body, // don't sign JSON bodies; only parameters\n    );\n\n    const postHeaders = Object.assign({}, baseHeaders, headers);\n    if (JSON_ENDPOINTS1.includes(resource)) {\n      body = JSON.stringify(body);\n    } else {\n      if (JSON_ENDPOINTS2.includes(resource)) {\n        const nonce = this.generateNonce();\n        const timestamp = Math.floor((new Date()).getTime() / 1000);\n        const parameters = {\n          oauth_consumer_key : this.config.consumer_key,\n          oauth_token : this.config.access_token_key,\n          oauth_nonce : nonce,\n          oauth_timestamp : timestamp,\n          oauth_signature_method : this.client.signature_method,\n          oauth_version : this.client.version,\n          media_data : body['media_data'],\n        };\n        const signatureData = this.createOauthSignature('POST', requestData.url, parameters, this.config.consumer_secret, this.config.access_token_secret);\n        body['oauth_consumer_key'] = this.config.consumer_key;\n        body['oauth_nonce'] = nonce;\n        body['oauth_signature'] = signatureData.signature;\n        body['oauth_signature_method'] = this.client.signature_method;\n        body['oauth_timestamp'] = timestamp;\n        body['oauth_token'] = this.config.access_token_key;\n        body['oauth_version'] = this.client.version;\n      }\n      body = percentEncode(querystring.stringify(body));\n      postHeaders['Content-Type'] = 'application/x-www-form-urlencoded';\n      if (JSON_ENDPOINTS2.includes(resource)) {\n        postHeaders['Content-Transfer-Encoding'] = 'base64';\n        delete postHeaders['Accept'];\n        delete postHeaders['Authorization'];\n      }\n    }\n\n    return Fetch(requestData.url, {\n      method: 'POST',\n      headers: postHeaders,\n      body,\n    })\n      .then(Twitter._handleResponse);\n  }\n\n  /**\n   * Send a PUT request\n   * @param {string} resource - endpoint e.g. `direct_messages/welcome_messages/update`\n   * @param {object} parameters - required or optional query parameters\n   * @param {object} body - PUT request body\n   * @returns {Promise<object>} Promise resolving to the response from the Twitter API.\n   */\n  put(resource, parameters, body) {\n    const { requestData, headers } = this._makeRequest(\n      'PUT',\n      resource,\n      parameters,\n    );\n\n    const putHeaders = Object.assign({}, baseHeaders, headers);\n    body = JSON.stringify(body);\n\n    return Fetch(requestData.url, {\n      method: 'PUT',\n      headers: putHeaders,\n      body,\n    })\n      .then(Twitter._handleResponse);\n  }\n\n  /**\n   *\n   * @param {string} resource - endpoint, e.g. `statuses/filter`\n   * @param {object} parameters\n   * @returns {Stream}\n   */\n  stream(resource, parameters) {\n    if (this.authType !== 'User')\n      throw new Error('Streams require user context authentication');\n\n    const stream = new Stream();\n\n    // POST the request, in order to accommodate long parameter lists, e.g.\n    // up to 5000 ids for statuses/filter - https://developer.twitter.com/en/docs/tweets/filter-realtime/api-reference/post-statuses-filter\n    const requestData = {\n      url: `${getUrl('stream')}/${resource}${this.config.extension ? '.json' : ''}`,\n      method: 'POST',\n    };\n    if (parameters) requestData.data = parameters;\n\n    const headers = this.client.toHeader(\n      this.client.authorize(requestData, this.token),\n    );\n\n    const request = Fetch(requestData.url, {\n      method: 'POST',\n      headers: {\n        ...headers,\n        'Content-Type': 'application/x-www-form-urlencoded',\n      },\n      body: percentEncode(querystring.stringify(parameters)),\n    });\n\n    request\n      .then(response => {\n        stream.destroy = this.stream.destroy = () => response.body.destroy();\n\n        if (response.ok) {\n          stream.emit('start', response);\n        } else {\n          response._headers = response.headers;  // TODO: see #44 - could omit the line\n          stream.emit('error', response);\n        }\n\n        response.body\n          .on('data', chunk => stream.parse(chunk))\n          .on('error', error => stream.emit('error', error))  // no point in adding the original response headers\n          .on('end', () => stream.emit('end', response));\n      })\n      .catch(error => stream.emit('error', error));\n\n    return stream;\n  }\n}\n\nmodule.exports = Twitter;\n"],"names":["crypto","require","OAuth","Fetch","querystring","Stream","oauthSignature","getRandomValues","getUrl","subdomain","endpoint","defaults","consumer_key","consumer_secret","access_token_key","access_token_secret","bearer_token","version","extension","JSON_ENDPOINTS1","JSON_ENDPOINTS2","baseHeaders","Accept","percentEncode","string","replace","Twitter","constructor","options","config","Object","assign","this","authType","client","key","secret","consumer","signature_method","hash_function","baseString","createHmac","update","digest","createOauthClient","token","url","oauth","_handleResponse","response","headers","ok","status","get","_headers","json","then","res","_handleResponseTextOrJson","body","text","parse","error","JSON","e","Promise","reject","getBearerToken","Authorization","Buffer","from","toString","method","getRequestToken","twitterCallbackUrl","requestData","parameters","oauth_callback","stringify","toHeader","authorize","getAccessToken","oauth_verifier","oauth_token","_makeRequest","resource","data","createOauthSignature","httpMethod","consumerSecret","tokenSecret","params","encodedSignature","generate","signature","encodeSignature","generateNonce","charset","result","Uint8Array","forEach","c","push","length","join","post","includes","postHeaders","nonce","timestamp","Math","floor","Date","getTime","signatureData","oauth_consumer_key","oauth_nonce","oauth_timestamp","oauth_signature_method","oauth_version","media_data","put","putHeaders","stream","Error","destroy","emit","on","chunk","catch","module","exports"],"mappings":"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"}